/** Autogenerated Main.cpp. */

// =============================| Include only the DSP files  |=============================

#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =======================| Now we can add the rest of the codebase |=======================

#include <JuceHeader.h>

// ===================================| Project Factory |===================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -------------------------------------------------------------
		
		registerPolyNode<project::OSC<1>, project::OSC<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::shfilter<1>, project::shfilter<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::chain3_networkdata>();
		registerDataNode<project::contain_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::files_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::harmoG_networkdata>();
		registerDataNode<project::main_networkdata>();
		registerDataNode<project::minmax_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod3_networkdata>();
		registerDataNode<project::moddy_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::Q_Node_networkdata>();
		registerDataNode<project::s3_networkdata>();
		registerDataNode<project::scriptnode_syntesiser1_networkdata>();
		registerDataNode<project::shaper_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth2_networkdata>();
		registerDataNode<project::synth3_networkdata>();
		registerDataNode<project::test_networkdata>();
		registerDataNode<project::tests_networkdata>();
		registerDataNode<project::the_networkdata>();
		registerDataNode<project::TRACK_LFO_networkdata>();
		registerDataNode<project::wdeleay_networkdata>();
		registerDataNode<project::weirddelay_networkdata>();
		registerDataNode<project::yes_midi_networkdata>();
		registerDataNode<project::_4wayswitch_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* hise::FrontendHostFactory::createStaticFactory()
{
	return new project::Factory();
}

