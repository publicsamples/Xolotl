/** Autogenerated Main.cpp. */

// =============================| Include only the DSP files  |=============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =======================| Now we can add the rest of the codebase |=======================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// ===================================| Project Factory |===================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -------------------------------------------------------------
		
		registerPolyNode<project::RevDel<1>, wrap::illegal_poly<project::RevDel<1>>>();
		registerPolyNode<project::OBLP<1>, wrap::illegal_poly<project::OBLP<1>>>();
		registerPolyNode<project::LPF<1>, wrap::illegal_poly<project::LPF<1>>>();
		registerPolyNode<project::klp2<1>, wrap::illegal_poly<project::klp2<1>>>();
		registerPolyNode<project::HPF<1>, wrap::illegal_poly<project::HPF<1>>>();
		registerPolyNode<project::granular<1>, wrap::illegal_poly<project::granular<1>>>();
		registerPolyNode<project::Comb<1>, project::Comb<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::BPF<1>, wrap::illegal_poly<project::BPF<1>>>();
		registerPolyNode<project::dlay<1>, wrap::illegal_poly<project::dlay<1>>>();
		registerPolyNode<project::modtest1<1>, wrap::illegal_poly<project::modtest1<1>>>();
		registerPolyNode<project::Xarrange<1>, project::Xarrange<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xnode<1>, project::xnode<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::bbdish_networkdata>();
		registerDataNode<project::Env_networkdata>();
		registerDataNode<project::Env2_networkdata>();
		registerDataNode<project::Env3_networkdata>();
		registerDataNode<project::Env4_networkdata>();
		registerDataNode<project::f_networkdata>();
		registerDataNode<project::Fausted_networkdata>();
		registerDataNode<project::ga_networkdata>();
		registerDataNode<project::GainMod_networkdata>();
		registerDataNode<project::harmnode_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::Htwentyfour_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::QuadCho_networkdata>();
		registerDataNode<project::TRACK_LFO_networkdata>();
		registerDataNode<project::xnodeCycle_networkdata>();
		registerDataNode<project::xnodeUser_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


