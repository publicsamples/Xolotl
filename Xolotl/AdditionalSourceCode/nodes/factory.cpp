/** Autogenerated Main.cpp. */

// =============================| Include only the DSP files  |=============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =======================| Now we can add the rest of the codebase |=======================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// ===================================| Project Factory |===================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -------------------------------------------------------------
		
		registerPolyNode<project::file<1>, project::file<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FM<1>, project::FM<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::harmnode<1>, project::harmnode<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::BlankMod_networkdata>();
		registerDataNode<project::chain3_networkdata>();
		registerDataNode<project::contain_networkdata>();
		registerDataNode<project::DelaySliders_networkdata>();
		registerDataNode<project::DspNetwork_networkdata>();
		registerDataNode<project::files_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::FilterMix1_networkdata>();
		registerDataNode<project::FilterMod_networkdata>();
		registerDataNode<project::FilterNew_networkdata>();
		registerDataNode<project::FilterNew2_networkdata>();
		registerDataNode<project::FilterNew3_networkdata>();
		registerDataNode<project::FilterNew4_networkdata>();
		registerDataNode<project::FilterNew5_networkdata>();
		registerDataNode<project::FilterNew6_networkdata>();
		registerDataNode<project::FilterNew7_networkdata>();
		registerDataNode<project::FilterNew8_networkdata>();
		registerDataNode<project::FilterStage9_networkdata>();
		registerDataNode<project::FmGainGmod_networkdata>();
		registerDataNode<project::FmIn_networkdata>();
		registerDataNode<project::Fmix2_networkdata>();
		registerDataNode<project::FMout_networkdata>();
		registerDataNode<project::fmsliders_networkdata>();
		registerDataNode<project::FmStage_networkdata>();
		registerDataNode<project::FmVoice_networkdata>();
		registerDataNode<project::Fs_networkdata>();
		registerDataNode<project::Ftest_networkdata>();
		registerDataNode<project::gate_networkdata>();
		registerDataNode<project::GateIn_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::GenericFilterStage_networkdata>();
		registerDataNode<project::GenericModStage_networkdata>();
		registerDataNode<project::GenericPitchStage_networkdata>();
		registerDataNode<project::GenericShapeStage_networkdata>();
		registerDataNode<project::GenericXF_networkdata>();
		registerDataNode<project::glide_networkdata>();
		registerDataNode<project::gtest_networkdata>();
		registerDataNode<project::harmcut_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::harmo2_networkdata>();
		registerDataNode<project::harmoG_networkdata>();
		registerDataNode<project::harmouser_networkdata>();
		registerDataNode<project::HArrange_networkdata>();
		registerDataNode<project::in1_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::main_networkdata>();
		registerDataNode<project::maxtest_networkdata>();
		registerDataNode<project::minmax_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod2_networkdata>();
		registerDataNode<project::mod3_networkdata>();
		registerDataNode<project::moddy_networkdata>();
		registerDataNode<project::NewFmConcept_networkdata>();
		registerDataNode<project::NewMod_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::OldMod_networkdata>();
		registerDataNode<project::OSC_networkdata>();
		registerDataNode<project::out_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::p1_networkdata>();
		registerDataNode<project::p2_networkdata>();
		registerDataNode<project::p3_networkdata>();
		registerDataNode<project::p4_networkdata>();
		registerDataNode<project::p5_networkdata>();
		registerDataNode<project::p6_networkdata>();
		registerDataNode<project::p7_networkdata>();
		registerDataNode<project::p8_networkdata>();
		registerDataNode<project::pan_networkdata>();
		registerDataNode<project::pan2_networkdata>();
		registerDataNode<project::pan3_networkdata>();
		registerDataNode<project::pan4_networkdata>();
		registerDataNode<project::pan5_networkdata>();
		registerDataNode<project::pan6_networkdata>();
		registerDataNode<project::pan7_networkdata>();
		registerDataNode<project::pan8_networkdata>();
		registerDataNode<project::PanSliders_networkdata>();
		registerDataNode<project::pitchin1_networkdata>();
		registerDataNode<project::PitchMod_networkdata>();
		registerDataNode<project::PitchStage1_networkdata>();
		registerDataNode<project::PitchStage2_networkdata>();
		registerDataNode<project::PitchStage3_networkdata>();
		registerDataNode<project::PitchStage4_networkdata>();
		registerDataNode<project::PitchStage5_networkdata>();
		registerDataNode<project::PitchStage6_networkdata>();
		registerDataNode<project::PitchStage7_networkdata>();
		registerDataNode<project::PitchStage8_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::pmod_networkdata>();
		registerDataNode<project::polymod_networkdata>();
		registerDataNode<project::polymod3_networkdata>();
		registerDataNode<project::pp10_networkdata>();
		registerDataNode<project::pp15_networkdata>();
		registerDataNode<project::PreGain_networkdata>();
		registerDataNode<project::PreIn1_networkdata>();
		registerDataNode<project::PseudoStereo_networkdata>();
		registerDataNode<project::PSliders_networkdata>();
		registerDataNode<project::psync_networkdata>();
		registerDataNode<project::Q_Node_networkdata>();
		registerDataNode<project::s3_networkdata>();
		registerDataNode<project::scriptnode_syntesiser1_networkdata>();
		registerDataNode<project::Send1_networkdata>();
		registerDataNode<project::send2_networkdata>();
		registerDataNode<project::Shape1_networkdata>();
		registerDataNode<project::Shape2_networkdata>();
		registerDataNode<project::Shape3_networkdata>();
		registerDataNode<project::Shape4_networkdata>();
		registerDataNode<project::Shape5_networkdata>();
		registerDataNode<project::Shape6_networkdata>();
		registerDataNode<project::Shape7_networkdata>();
		registerDataNode<project::Shape8_networkdata>();
		registerDataNode<project::shaper_networkdata>();
		registerDataNode<project::shfilter_networkdata>();
		registerDataNode<project::SIMPLESCRUB_networkdata>();
		registerDataNode<project::Switcher_networkdata>();
		registerDataNode<project::synctest_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth_networkdata>();
		registerDataNode<project::synth2_networkdata>();
		registerDataNode<project::synth3_networkdata>();
		registerDataNode<project::tabl_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::test_networkdata>();
		registerDataNode<project::tests_networkdata>();
		registerDataNode<project::the_networkdata>();
		registerDataNode<project::TRACK_LFO_networkdata>();
		registerDataNode<project::UserXF_networkdata>();
		registerDataNode<project::w4_networkdata>();
		registerDataNode<project::wdeleay_networkdata>();
		registerDataNode<project::WeirdDelay_networkdata>();
		registerDataNode<project::xfade1_networkdata>();
		registerDataNode<project::xfade2_networkdata>();
		registerDataNode<project::xfade3_networkdata>();
		registerDataNode<project::xfade4_networkdata>();
		registerDataNode<project::xfade5_networkdata>();
		registerDataNode<project::xfade6_networkdata>();
		registerDataNode<project::xfade7_networkdata>();
		registerDataNode<project::xfade8_networkdata>();
		registerDataNode<project::yes_midi_networkdata>();
		registerDataNode<project::_4wayswitch_networkdata>();
		registerDataNode<project::_8Delay_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


